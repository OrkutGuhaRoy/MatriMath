import streamlit as st
from PIL import Image
from google import genai
import json, re

# Gemini client setup
client = genai.Client(api_key=st.secrets["gemini_key"])

# ------------------------------
# Gemini Math Reasoning Pipeline (Image or Text)
# ------------------------------
def solve_with_gemini(input_type, input_data):
    if input_type == "image":
        prompt = """
You are a math tutor. Given an image that contains a math problem (printed or handwritten), perform the following:
1. Extract the math question from the image.
2. Detect the language.
3. If the question is a valid math/reasoning/logical problem:
   - Translate it into English.
   - Solve it step-by-step.
   - Your explanation must contain:
     a) A simple, Feynman-style explanation using relatable, real-world analogies or examples in an Indian/Indic setting.
     b) A technical breakdown that includes necessary mathematical concepts and formulas.
   - Clearly mark the final answer as: Final Answer: <your answer>
4. If it is NOT a valid math question, return this JSON:
{
  "status": "error",
  "reason": "Not a math problem."
}
5. If valid, respond with this JSON:
{
  "status": "ok",
  "original_language": "<language>",
  "solution": "<Step-by-step solution with Final Answer>",
  "translated_question": "<MathQuestion in English>"
}
"""
        response = client.models.generate_content(
            model="gemini-2.5-pro", contents=[prompt, input_data]
        )
        return response

    elif input_type == "text":
        prompt = f"""
You are a math tutor. Follow these instructions:
1. Detect the language of this input.
2. If it's a math/reasoning/logical question:
   - Translate to English.
   - Solve it step-by-step.
   - Your explanation must contain:
     a) A simple, Feynman-style explanation using relatable, real-world analogies or examples in an Indian/Indic setting.
     b) A technical breakdown that includes necessary mathematical concepts and formulas.
   - Clearly mark the final answer as: Final Answer: <your answer>
3. If not valid, respond:
{{"status": "error", "reason": "Not a math problem."}}
4. If valid, respond:
{{
  "status": "ok",
  "original_language": "<language>",
  "solution": "<Step-by-step solution with Final Answer>",
  "translated_question": "<MathQuestion in English>"
}}

Input:
{input_data}
"""
        response = client.models.generate_content(
            model="gemini-2.5-pro", contents=prompt
        )
        return response

# ------------------------------
# Streamlit UI
# ------------------------------
st.set_page_config(page_title="MatriMath - AI Math Assistant", layout="centered", page_icon="ЁЯУР")
st.title("ЁЯза MatriMath: Multilingual Math Assistant (Powered by Gemini 2.5 Pro)")
with st.expander("тД╣я╕П About MatriMath"):
    st.markdown("""
**ЁЯСд Created by:** `Swastik Guha Roy`  
**ЁЯФз Powered by:** Google Gemini 2.5 Pro API  

---

### ЁЯМЯ What is MatriMath?

Imagine an app where you can ask a math or logical reasoning question тАФ in **any language you're comfortable with** тАФ and get a **step-by-step explanation** in both:

- тЬи **English**  
- ЁЯЧгя╕П **Your original language**

You donтАЩt have to worry about fluency in English or crafting the perfect prompt. Just input your question (typed or via image), and MatriMath takes care of the rest тАФ from language detection to solution explanation.

---

### ЁЯТЦ Why the name *MatriMath*?

тАЬ**Matri**тАЭ means *mother*.

Just like your mother patiently helped you learn things step-by-step тАФ in your own language тАФ MatriMath aims to teach math in a way thatтАЩs nurturing, clear, and comforting.  
YouтАЩll get both:

- A **Feynman-style, intuitive explanation** using real-world examples  
- A **technically complete** breakdown of the concepts involved

---

### тЪая╕П Disclaimer

- This is an experimental educational tool.  
- Accuracy of solutions is **not guaranteed**.  
- Always cross-check critical answers manually.

---

### ЁЯУм Contact

Have suggestions, feedback, or want to collaborate?  
Reach out: **swastikguharoy@googlemail.com**
    """)

    with st.expander("ЁЯМР ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝"):
        st.markdown("""
**ЁЯСд ржирж┐рж░рзНржорж╛рждрж╛:** `рж╕рзНржмрж╕рзНрждрж┐ржХ ржЧрзБрж╣ рж░рж╛ржпрж╝`  
**ЁЯФз ржЪрж╛рж▓рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ:** Google Gemini 2.5 Pro API ржжрзНржмрж╛рж░рж╛  

---

### ЁЯМЯ MatriMath ржХрзА?

ржнрж╛ржмрзБржи, ржПржоржи ржПржХржЯрж┐ ржЕрзНржпрж╛ржк ржпрзЗржЦрж╛ржирзЗ ржЖржкржирж┐ ржпрзЗржХрзЛржирзЛ ржнрж╛рж╖рж╛ржпрж╝ ржЧржгрж┐ржд ржмрж╛ ржпрзБржХрзНрждрж┐рж░ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи,  
ржЖрж░ рж╕рзЗржЗ ржкрзНрж░рж╢рзНржирзЗрж░ **ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ рж╕ржорж╛ржзрж╛ржи** ржкрж╛ржмрзЗржи:

- тЬи **ржЗржВрж░рзЗржЬрж┐рждрзЗ**  
- ЁЯЧгя╕П **ржЖржкржирж╛рж░ ржирж┐ржЬрзЗрж░ ржнрж╛рж╖рж╛ржпрж╝**  

ржЗржВрж░рзЗржЬрж┐ ржЬрж╛ржирждрзЗржЗ рж╣ржмрзЗтАФржПржЗ ржЪрж╛ржкржЯрж╛ ржЖрж░ ржерж╛ржХржмрзЗ ржирж╛ред  
ржкрзНрж░рж╢рзНржи ржжрж┐ржи, ржмрж╛ржХрж┐ржЯрж╛ MatriMath ржирж┐ржЬрзЗржЗ ржмрзБржЭрзЗ ржирзЗржмрзЗ ржПржмржВ ржмрзНржпрж╛ржЦрзНржпрж╛ ржжрзЗржмрзЗред

---

### ЁЯТЦ ржирж╛ржо *MatriMath* ржХрзЗржи?

тАЬ**ржорж╛рждрзГ**тАЭ ржорж╛ржирзЗ ржорж╛ред 

ржпрзЗржнрж╛ржмрзЗ ржЖржкржирж╛рж░ ржорж╛ ржзрзИрж░рзНржп ржзрж░рзЗ рж╢рж┐ржЦрж┐ржпрж╝рзЗржЫрзЗржи ржЫрзЛржЯржмрзЗрж▓рж╛ржпрж╝,  
MatriMath-ржУ рж╕рзЗржЗржнрж╛ржмрзЗржЗ ржирж┐ржЬрзЗрж░ ржнрж╛рж╖рж╛ржпрж╝ рж╕рж╣ржЬ ржЙржжрж╛рж╣рж░ржгрзЗ ржЧржгрж┐ржд ржмрзЛржЭрж╛ржмрзЗред  

ржЖржкржирж┐ ржкрж╛ржмрзЗржитАФ

- **рж╕рж╛ржзрж╛рж░ржг ржЙржжрж╛рж╣рж░ржгрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛**  
- **рж╕ржарж┐ржХ рж╕рзВрждрзНрж░, ржзрж╛ржк ржУ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрж╕рж╣ рж╕ржорж╛ржзрж╛ржи**

---

### тЪая╕П ржжрж╛ржпрж╝рж┐рждрзНржм ржЕрж╕рзНржмрзАржХрж╛рж░

- ржПржЯрж┐ ржПржХржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ржорзВрж▓ржХ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржЯрзБрж▓ред  
- рж╕ржарж┐ржХрждрж╛рж░ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐ ржирзЗржЗред  
- ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржЧржгржирж╛ржЧрзБрж▓рж┐ ржирж┐ржЬрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржирж┐ржиред

---

### ЁЯУм ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи

ржорждрж╛ржоржд, ржкрж░рж╛ржорж░рзНрж╢, ржЕржержмрж╛ рж╕рж╣ржпрзЛржЧрж┐рждрж╛рж░ ржЬржирзНржп тАФ  
**swastikguharoy@googlemail.com** ржП ржорзЗржЗрж▓ ржХрж░рзБржиред
""")


uploaded_file = st.file_uploader("ЁЯУ╕ Upload an image with a math problem (handwritten or printed)", type=["jpg", "jpeg", "png"])
user_text = st.text_area("ЁЯУЭ Or type your math question:", "")

if st.button("ЁЯЪА Solve It"):
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        with st.spinner("ЁЯФН Analyzing the image and solving..."):
            response = solve_with_gemini("image", image)
    elif user_text.strip():
        with st.spinner("ЁЯза Analyzing your text and solving..."):
            response = solve_with_gemini("text", user_text)
    else:
        st.warning("Please upload an image or enter a question.")
        st.stop()

    try:
        result_json = json.loads(re.search(r"{.*}", response.text, re.DOTALL)[0])

        if result_json["status"] == "error":
            st.error("ЁЯЪл Not a valid math or reasoning question.")
        else:
            st.markdown("### ЁЯУШ Translated Math Question (English):")
            st.info(result_json["translated_question"])

            with st.spinner("ЁЯМР Translating solution back to original language..."):
                back_prompt = f"""Translate the following step-by-step math solution into {result_json['original_language']}:

{result_json['solution']}"""
                translated_solution = client.models.generate_content(
                    model="gemini-2.5-flash", contents=back_prompt
                ).text

            st.markdown("### ЁЯМН Solution in Your Language:")
            st.success(translated_solution)

            st.markdown("### ЁЯз╛ English Step-by-step Solution:")
            st.info(result_json["solution"])

    except Exception as e:
        st.error(f"тЪая╕П Failed to parse Gemini response.\n{e}")
